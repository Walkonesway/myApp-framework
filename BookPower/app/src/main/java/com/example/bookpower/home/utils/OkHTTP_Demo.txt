package com.example.bookpower.home.utils;

import android.os.Handler;
import android.os.Looper;

import androidx.recyclerview.widget.AsyncListUtil;

import org.jetbrains.annotations.NotNull;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.net.InterfaceAddress;
import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.TimeUnit;

import okhttp3.Call;
import okhttp3.Callback;
import okhttp3.FormBody;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.RequestBody;
import okhttp3.Response;

public class OkHttp {

    /**
     * 静态实例
     */
    private static OkHttp sOkHttpManager;

    /**
     * okhttpclient实例
     */
    private OkHttpClient mClient;

    /**
     * 因为我们请求数据一般都是子线程中请求，在这里我们使用了handler
     */
    private Handler mHandler;
    /**
     * 构造方法
     */
    private OkHttp(){

        // 可以通过实现 Logger 接口更改日志保存位置
        HttpLoggingInterceptor loggingInterceptor = new HttpLoggingInterceptor();
        loggingInterceptor.setLevel(HttpLoggingInterceptor.Level.BODY);

        //        mClient = new OkHttpClient.Builder().addInterceptor(loggingInterceptor).build();
        mClient = new OkHttpClient();
        /**
         * 在这里设置 连接超时、读取超时、写入超时
         */

        OkHttpClient.Builder builder = mClient.newBuilder();
        builder.connectTimeout(100, TimeUnit.SECONDS);
        builder.readTimeout(100,TimeUnit.SECONDS);
        builder.writeTimeout(100,TimeUnit.SECONDS);
        builder.addInterceptor(loggingInterceptor);
        mClient = builder.build();

        /**
         * 如果用的是3.0之前的版本，使用一下直接设置超时
         */

        /**
         * client.setConnectTimeout(100, TimeUnit.SECONDS);
         * client.setWriteTimeout(100, TimeUnit.SECONDS);
         * client.setReadTimeout(100, TimeUnit.SECONDS);
         */


        /**
         * 初始化handler
         */
        mHandler = new Handler(Looper.getMainLooper());
    }

    /**
     * 单例模式，获取Okhttp实例
     * @return
     */
    public static OkHttp getInstance(){

        if (sOkHttpManager == null){
            sOkHttpManager = new OkHttp();
        }
        return sOkHttpManager;
    }

    /*---------------------------------------------------*/
    /*------------------同步式请求数据-------------------*/

    /**
     * 对外提供的get方法，同步式请求
     * @param url 传入的地址
     * @return
     */
    public static Response getSync(String url){
        //通过获取到的实例，调用内部方法
        return sOkHttpManager.inner_getSync(url);
    }

    /**
     * get方法处理逻辑、同步方式
     * @param url
     * @return
     */
    private Response inner_getSync(String url) {
        Request request = new Request.Builder().url(url).build();
        Response response = null;
        try {
            //同步请求返回的是response对象
            response = mClient.newCall(request).execute();
        }catch (IOException e){
            e.printStackTrace();
        }
        return response;
    }

    /**
     * 对外提供的同步获取String方法
     * @return
     */
    public static String getSyncString(){
        return sOkHttpManager.inner_getSyncString(url);
    }

    private  String inner_getSyncString(String url){
        String result = null;
        try {
            /**
             * 把取到的结果转为字符串，这里最好用string
             */
            result = inner_getSync(url).body().string();
        }catch (IOException e){
            e.printStackTrace();
        }
        return result;
    }

    /*----------------------------------------------------*/
    /*--------------------异步请求数据----------------*/

    public static void getAsync(String url, AsyncListUtil.DataCallback callback){
        getInstance().inner_getAsync(url,callback);
    }

    /**
     * 内部逻辑请求
     * @param url
     * @param callBack
     */
    private void inner_getAsync(String url,
                                final DataCallBack callBack){
        final Request request = new Request.Builder().url(url).build();

        mClient.newCall(request).enqueue(new Callback() {
            @Override
            public void onFailure(@NotNull Call call, @NotNull IOException e) {
                deliverDataFailure(request, e, callBack);
            }

            @Override
            public void onResponse(@NotNull Call call, @NotNull Response response)
                    throws IOException {
                String result = null;
                try {
                    result = response.body().string();
                }catch (IOException e){
                    deliverDataFailure(request, e, callBack);
                }
                deliverDataSuccess(result, callBack);
            }
        });
    }

    /**
     * 分发失败的时候调用
     * @param request
     * @param e
     * @param callBack
     */
    private void deliverDataFailure(final Request request,
                                    final IOException e, final DataCallBack callBack){
        /**
         * 在这里进行异步请求处理
         */

        mHandler.post(new Runnable() {
            @Override
            public void run() {
                if (callBack != null ){
                    callBack.requestFailure(request, e);
                }
            }
        });
    }

    /**
     * 分发成功的时候调用
     * @param result
     * @param callBack
     */
    private void deliverDataSuccess(final String result,
                                    final DataCallBack callBack){
        /**
         * 在这里使用异步线程处理
         */
        mHandler.post(new Runnable() {
            @Override
            public void run() {
                if (callBack != null){
                    try {
                        callBack.requestSuccess(result);
                    }catch (Exception e){
                        e.printStackTrace();
                    }
                }
            }
        });
    }

    public Interface DataCallBack{
        void requestFailure(Request request, IOException e);

        void requestSuccess(String result)throw Exception;
    }

    /*---------------------------------------------------*/
    //提交表单

    public static void postAsync(String url, Map<String, String>
            params, DataCallBack callBack){
        getInstance().inner_postAsync(url, params, callBack);
    }

    private void inner_postAsync(String url, Map<String, String>
            params, final DataCallBack callBack){
        RequestBody requestBody = null;
        if (params == null){
            params = new HashMap<>();
        }

        /**
         * 如果是3.0之前版本的，构建表单数据是下面的一句
         */
        //FormEncodingBuilder builder = new FormEncodingBuilder();

        /**
         * 3.0之后版本
         */
        FormBody.Builder builder = new FormBody.Builder();

        /**
         * 在这对添加的参数进行遍历，map遍历有四种方式，如果想要了解的可以网上查找
         */
        for (Map.Entry<String, String> map : params.entrySet()){
            String key = map.getKey().toString();
            String value = null;
            /**
             * 判断值是否是空的
             */
            if (map.getValue() == null){
                value = "";
            }else {
                value = map.getValue();
            }

            /**
             * 把key和value添加到formbody中
             */
            builder.add(key,value);
        }
        requestBody = builder.build();

        //结果返回
        //请求对象
        final Request request = new Request.Builder().url(url).post(requestBody).build();
        mClient.newCall(request).enqueue(new Callback() {
            @Override
            public void onFailure(@NotNull Call call, @NotNull IOException e) {
                deliverDataFailure(request,e,callBack);
            }

            @Override
            public void onResponse(@NotNull Call call, @NotNull
                    Response response) throws IOException {
                String result = response.body().string();
                deliverDataSuccess(result,callBack);
            }
        });
    }

    /*----------------------------------------------------*/
    /*----------------------文件下载 ----------------------*/

    public static void downloadAsync(String url,
                                     String desDir, DataCallBack callBack){
        getInstance().inner_downloadAsync(url, desDir, callBack);
    }

    /**
     * 下载文件的内部逻辑处理类
     * @param url  下载地址
     * @param desDir  目标地址
     * @param callBack
     */
    private void inner_downloadAsync(final String url, final String desDir,
                                     final DataCallBack callBack){
        final Request request = new Request.Builder().url(url).build();
        mClient.newCall(request).enqueue(new Callback() {
            @Override
            public void onFailure(@NotNull Call call, @NotNull IOException e) {
                deliverDataFailure(request, e, callBack);
            }

            @Override
            public void onResponse(@NotNull Call call, @NotNull Response
                    response) throws IOException {

                /**
                 * 在这里进行文件的下载处理
                 */
                InputStream inputStream = null;
                FileOutputStream fileOutputStream = null;
                try {
                    //文件名和目标地址
                    File file = new File(desDir, getFileName(url));
                    //把请求回来的response对象装换为字节流
                    inputStream = response.body().byteStream();
                    fileOutputStream = new FileOutputStream(file);
                    int len = 0;
                    byte[] bytes = new byte[2048];
                    //循环读取数据
                    while ((len = inputStream.read(bytes)) != -1){
                        fileOutputStream.write(bytes, 0, len);
                    }

                    //关闭文件输出流
                    fileOutputStream.flush();
                    //调用分发数据成功的方法
                    deliverDataSuccess(file.getAbsolutePath(), callBack);
                }catch (IOException e){
                    //如果失败，调用此方法
                    deliverDataFailure(request, e, callBack);
                    e.printStackTrace();
                }finally {
                    if (inputStream != null){
                        inputStream.close();
                    }
                    if (fileOutputStream != null){
                        fileOutputStream.close();
                    }
                }
            }
        });
    }

    /**
     * 根据文件的url获取路径名
     * @param url
     * @return
     */
    private String getFileName(String url){
        int separatorIndex = url.lastIndexOf("/");
        String path = (separatorIndex < 0) ? url : url.
                substring(separatorIndex + 1, url.length());
        return  path;
    }
}